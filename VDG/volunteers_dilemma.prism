// ----------------------------------------
// Authorship
// ----------------------------------------
// CPS Final Project
// Jacob Dineen, A S M Ahsan-Ul Haque, Matthew Bielska
// jd5ed, ah3wj, mb6xn]@virginia.e
// ----------------------------------------


// ----------------------------------------
// Gameplay
// ----------------------------------------
// Volunteer's Dilemma Game
// Player are instantiated with initial resource allocation
// There is a finite length target (rneeded). rneeded is less than or equal to the number of agents in the game, n
// Reward is distributed if sum(si...sn) >= rneeded
//    - This reward decays for over-donation
//    - Rewards can be utilizied at round k+1
//        - player can donate 0/50/100% of resources at round k
//            - resources donated are resourced expended



// ----------------------------------------
// Init Params
// ----------------------------------------
csg //concurrent stochastic game

player p1 m1 endplayer
player p2 m2 endplayer
player p3 m3 endplayer


const int n = 3; // number of players
const int kmax; // number of rounds. k is the current round
const int einit; // initial resource allocation
const int rmax =1000; // max resources procured by agent v_i
const int rneeded = 200; // Resources needed for reward allocation  ORIG:200
const int scaling = 2;
const int roptimum = floor(rneeded*scaling/n);

// ----------------------------------------
// round counter (https://www.prismmodelchecker.org/casestudies/public_good_game.php)
// ----------------------------------------
module counter

	k : [0..kmax+1] init 0; // round. init to zero. Bounded by kmax. Finite length game

	[] k<=kmax -> (k'=k+1);

endmodule


//-------------------------------------------------------------------
// Player Modules
//-------------------------------------------------------------------
// module for player 1
//-------------------------------------------------------------------
    // c1 & c1' explanation
    //-------------------------------------------------------------------
    // c_i = resources for player i @ round k
    // This is updated at the end of every round via c1'= min(rmax, (c1 - floor(s1')) + ((1.0) / (( s1'+s2'+s3'+s4')/ rneeded))))
    // c1 & c1' should be doubles to allow for partial resource collection


    //-------------------------------------------------------------------
    // s1 and s1' explanation
    //-------------------------------------------------------------------
    // s_i = resources to be shared in round k
    // Resource donations are ints. Because a_50 denotes a donation of half of total resources, we clip this via the floor operator.
    // Because rewards are distributed back into the resource allocation, it makes sense to allow for partial donations of total Resources
    // e.g., if a player has four total resources after round 3, they can donate floor(p * c1 resources toward the pot)
    // we use similar noted in the public games literature to avoid a continuous search space for strategy trees
    // Note that in rounds where the agent can't donate partial resources, e.g. floor(p * c1) < 1, they won't donate at all in this mechanism


    //-------------------------------------------------------------------
    // c1' and reward explanation
    //-------------------------------------------------------------------
    // the resources for the player are updated via a reward function, e.g., if rneeded is hit by resource donations,
    // each agent is distributed back reward. This reward should only be passed back in full if over-donating does not occur.
    // e.g., if there are four agents and three are required to donate, if all four donate, full reward is not distributed.
    // ((1.0) / (( s1'+s2'+s3'+s4')/ rneeded)))
    //-------------------------------------------------------------------

    //-------------------------------------------------------------------
    // Resource Depletion
    //-------------------------------------------------------------------
    // Expenditures are calculated as (ci - floor(si'))
    // if a player donates c_i resources at k, those resources are depleted.
    // A player can only donate a whole amount of resources at each time-step
    //-------------------------------------------------------------------

    //-------------------------------------------------------------------
    // CSG
    //-------------------------------------------------------------------
    // while the round is less than the max round, if an agent donates their resources according to p = 0, they remain in the same instantiated state.
    // The resources are updated as the minimum of rmax (a max resource threshold) against their initial resource allocation minus their contribution
    // We then add in rewards if rneeded is hit. Because reward decays with increased presence of over-donation, we pass back rewards as
    // ((1.0) / (( s1'+s2'+s3'+s4')/ rneeded))))
    //-------------------------------------------------------------------
    // An example, assume that we are in round k = 5. rneeded = 3, n = 4
    //-------------------------------------------------------------------
    // All agents have played winning, cohesive strategies to this point. So after three rounds, a reward = 1 was passed back each time
    // c1 = c2 = c3 = c4 = 4 (all agents have 4 resources in hand).
    // There are two strategies that maximize reward here: either 3/4 agents donate a single resource, or one agent donates all necessary resources
    // and the other three free ride. If all agents choose to donate rneeded = 3 resources, they win, but not efficiently. The decaying factor
    // of the reward function means that the agents only get .25 resources after the end of the round. And, remember here, they expend resources via donation.

    //-------------------------------------------------------------------
    // Expenditures are calculated as (ci - floor(si'))
    // A player can only donate a whole amount of resources at each time-step
    // resources gained + init resources can never exceed r_max
    //-------------------------------------------------------------------
    module m1
        c1 : [0..rmax] init einit; // resources for player i
        s1 : [0..rmax] init 0; // resources to be shared

      	[i1_0] k<kmax -> (s1'=floor(0 * c1)) & (c1'= min(rmax, floor( (c1 - s1') + 
((s1' + s2' + s3' < rneeded) ? 0: ( (s1' + s2' + s3' = rneeded)? roptimum: ( -.01429*(s1'+s2'+s3' - rneeded) + rneeded * scaling ) ) ) ) ) );

      	[i1_50] k<kmax -> (s1'=floor(0.5 * c1)) & (c1'= min(rmax, floor( (c1 - s1') + 
((s1' + s2' + s3' < rneeded) ? 0: ( (s1' + s2' + s3' = rneeded)? roptimum: ( -.01429*(s1'+s2'+s3' - rneeded) + rneeded * scaling) ) ) ) ) );

      	[i1_100] k<kmax -> (s1'=floor(1.0 * c1)) & (c1'= min(rmax, floor( (c1 - s1') + 
((s1' + s2' + s3' < rneeded) ? 0: ( (s1' + s2' + s3' = rneeded)? roptimum: ( -.01429*(s1'+s2'+s3' - rneeded) + rneeded * scaling) ) ) ) ) );

      	[done1] k>=kmax -> (c1'=c1) & (s1'=s1);

    endmodule


// construct further modules through renaming
// all players share the same: init resource allocation
// this is borrowed PORISM code. I'm not sure what the s1 = s2, s2 =s1


// player 2
module m2 = m1[c1=c2,
		s1=s2,
		s2=s1,
		i1_0=i2_0,
		i1_50=i2_50,
		i1_100=i2_100,
		done1=done2] endmodule

// player 3
module m3 = m1[c1=c3,
		s1=s3,
		s3=s1,
		i1_0=i3_0,
		i1_50=i3_50,
		i1_100=i3_100,
		done1=done3] endmodule



// ------------------------------------------
// rewards at round k for agent v_i
// ------------------------------------------

// time dependent rewards synced throughout gameplay. ri is the reward for agent i at round k
// to be used for strategy synthesis

rewards "r1"
	true : c1 - einit;
endrewards

rewards "r2"
	true : c2 - einit;
endrewards

rewards "r3"
	true : c3 - einit;
endrewards

rewards "r23"
	true : c2+c3 - 2*einit;
endrewards

rewards "r12"
	true : c1+c2 - 2*einit;
endrewards




// ------------------------------------------
// Final Rewards for agent v_i
// ------------------------------------------

// if the current round is equal to the max round, take the current resource allocation for agent v_i, c_i,
// and subtract it from the init resource allocation

// a philosopher is hungry
label "error" = c1 + c2 + c3 < rneeded ; 
label "good" = c1 + c2 + c3 > rneeded * 2 ; 

label "perfect" = s1 + s1 + s1 = rneeded;

rewards "done1"
	k=kmax : c1 - einit;
endrewards

rewards "done2"
	k=kmax : c2 - einit;
endrewards

rewards "done3"
	k=kmax : c3 - einit;
endrewards

rewards "done12"
	k=kmax: c1+c2-2*einit;
endrewards

rewards "done23"
	k=kmax: c2+c3-2*einit;
endrewards

rewards "done123"
	k=kmax: c1+c2+c3 - 3*einit;
endrewards
